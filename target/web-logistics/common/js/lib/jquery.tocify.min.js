/* jquery Tocify - v0.3.0 - 2012-08-15
 * http://www.gregfranko.com/jquery.tocify.js/
 * Copyright (c) 2012 Greg Franko; Licensed MIT */
(function(tocify) {
    "use strict";
    tocify(jQuery, window, document);

}
(function($, window, document, undefined) {
    "use strict";

    $.widget("toc.tocify", {
    version: "0.3.0",
    options: {
        context: "body",
        selectors: "h1, h2, h3",
        showAndHide: true,

        showEffect: "slideDown",
        showEffectSpeed: "medium",
        hideEffect: "slideUp",
        hideEffectSpeed: "medium",

        smoothScroll: true,

        smoothScrollSpeed: "medium",
        scrollTo: 0,

            showAndHideOnScroll: true,

            highlightOnScroll: true,

        highlightOffset: 40,



        jqueryUI: true,



        extendPage: true
    },
        _create: function() {

        this._generateToc();

        this._setEventHandlers();

        this._addCSSClasses();

    },
    _generateToc: function() {

        var self = this,
        firstElem,
        ul,
        previousHeader;

        if(this.options.selectors.indexOf(",") !== -1) {
            firstElem = $(this.options.context).find(this.options.selectors.replace(/ /g,"").substr(0, this.options.selectors.indexOf(",")));

        }
    else {
            firstElem = $(this.options.context).find(this.options.selectors.replace(/ /g,""));

        }



        firstElem.each(function(index) {



            ul = $("<ul/>", {
                "id": "Header" + index,
                "class": "header"
            }).

            append(self._nestElements($(this), index));

            self.element.append(ul);



            $(this).nextUntil(this.nodeName.toLowerCase()).filter(self.options.selectors).each(function(index, selector) {

                previousHeader = $(this).prevAll(self.options.selectors).first();



                if(+$(this)[0].tagName.charAt(1) < +previousHeader[0].tagName.charAt(1)) {



                    self.element.find(".sub-header").last().after(self._nestElements($(this), index));

                }



                else if(+$(this)[0].tagName.charAt(1) === +previousHeader[0].tagName.charAt(1)) {

                    ul.find(".item").last().after(self._nestElements($(this), index));

                }

                else {


                    ul.find(".item").last().



                    after($("<ul/>", {
                        "class": "sub-header"
                    })).next(".sub-header").



                    append(self._nestElements($(this), index));
                }

            });

        });

    },


    _nestElements: function(self, index) {



        var item = $("<li/>", {



        "text": self.text(),



        "class": "item",


        "data-href": self.text().replace(/\s/g, ""),

            "data-unique": (self.text() + index).replace(/\s/g, "")

    });



        self.before($("<div/>", {



        "name": self.text().replace(/\s/g, ""),

            "data-unique": (self.text() + index).replace(/\s/g, "")

    }));

        return item;

    },



    _setEventHandlers: function() {






        var self = this,


        $self,



        duration;



        this.element.on("click.tocify", "li", function(event) {


            if(window.History && window.History.Adapter) {



                window.History.pushState(null, $(this).attr("data-href"), "?" + $(this).attr("data-href"));

            }



            $("." + self.focusClass).removeClass(self.focusClass);



            $(this).addClass(self.focusClass);


      if(!window.History && !window.History.Adapter && self.options.showAndHide) {



                self.show($(this).closest(".header").find(".sub-header"));

            }



            $self = $(this);



            if (self.options.smoothScroll) {



                duration = self.options.smoothScrollSpeed;

            }

            else {



                duration = 0;

            }




            $("html, body").animate({



            "scrollTop": $('div[data-unique="' + $self.attr("data-unique") + '"]').offset().top - self.options.scrollTo + "px"

        }, {



                "duration": duration

            });



            self.element.animate({



            "scrollTop": $self.offset().top + "px"

        }, {


                "duration": duration

            });

        });



        this.element.find("li").on({



        "mouseenter.tocify": function() {



            $(this).addClass(self.hoverClass);



            $(this).css("cursor", "pointer");

        },



        "mouseleave.tocify": function() {



            $(this).removeClass(self.hoverClass);

        }
    });



        $(window).on("scroll.tocify", function() {


            $("html, body").promise().done(function() {







                var winScrollTop = $(window).scrollTop(),


                winHeight = $(window).height(),



                docHeight = $(document).height(),

                    scrollHeight = $("body")[0].scrollHeight,




                elem,

                    lastElemOffset;

                if(self.options.extendPage) {


                    if((winScrollTop >= scrollHeight - winHeight) || ( winHeight + winScrollTop > docHeight - 25)) {

                        self.element.scrollTop(winScrollTop);

                        if(!$(".tocify-extend-page").length) {



                            lastElemOffset = $('div[data-unique="' + $(".item").last().attr("data-unique") + '"]').offset().top;



                            $(self.options.context).append($("<div />", {

                                "class": "tocify-extend-page",

                                "height": Math.abs(lastElemOffset - winScrollTop) + "px"

                            }));

                        }

                    }

                }



                setTimeout(function() {



                    $(self.options.context).find("div[data-unique]").next().each(function() {



                        if ((Math.abs($(this).offset().top - winScrollTop) < self.options.highlightOffset)) {



                            elem = $('li[data-unique="' + $(this).prev("div[data-unique]").attr("data-unique") + '"]');



                            if(self.options.highlightOnScroll && elem.length) {



                                $("." + self.focusClass).removeClass(self.focusClass);



                                elem.addClass(self.focusClass);

                            }



                            if(self.options.showAndHideOnScroll && self.options.showAndHide) {



                                if(elem.parent().hasClass("header")) {





                                    self.show(elem.next(".sub-header"));

                                }



                            else if(elem.parent().hasClass("sub-header")) {


                                    self.show(elem.parent());

                                }
                            }

                            return false;

                        }

                    });

                }, 0);

            });

        });



        if(window.History && window.History.Adapter && self.options.showAndHide) {



            window.History.Adapter.bind(window,'statechange',function() {



                var elem = $('li[data-href="' + window.History.getState().title + '"]');

                if(elem.next(".sub-header").length || elem.parent().is(".header")) {


                    self.show(elem.next(".sub-header"));

                }

            });

        }

    },



    show: function(elem) {



        var self = this;




        if (!elem.is(":visible")) {



            switch (self.options.showEffect) {




                case "none":

                    elem.show();

                    break;




                case "show":

                    elem.show(self.options.showEffectSpeed);

                    break;



                case "slideDown":

                    elem.slideDown(self.options.showEffectSpeed);

                    break;



                case "fadeIn":

                    elem.fadeIn(self.options.showEffectSpeed);

                    break;



                default:

                    elem.show();

                    break;

            }



            self.hide($(".sub-header").not(elem.closest(".header").find(".sub-header")));

        }



        return this;
    },




    hide: function(elem) {



        var self = this;



        if (elem.is(":visible")) {




            switch (self.options.hideEffect) {



                case "none":

                    elem.hide();

                    break;



                case "hide":

                    elem.hide(self.options.hideEffectSpeed);

                    break;



                case "slideUp":

                    elem.slideUp(self.options.hideEffectSpeed);

                    break;



                case "fadeOut":

                    elem.fadeOut(self.options.hideEffectSpeed);

                    break;



                default:

                    elem.hide();

                    break;
            }
        }



        return this;
    },



    _addCSSClasses: function() {

        var self = this;



        if(this.options.jqueryUI) {

            this.focusClass = "ui-state-focus";

            this.hoverClass = "ui-state-hover";

            this.element.addClass("ui-widget").find(".toc-title").addClass("ui-widget-header").end().find("li").addClass("ui-widget-content");

        }

        else {



            this.focusClass = "tocify-focus";

            this.hoverClass = "tocify-hover";

        }

        return this;

    }

});

}));